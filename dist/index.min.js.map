{"version":3,"sources":["../dev/index.js"],"names":["PNGArrays","[object Object]","array","alpha","file","constructor","Uint8ClampedArray","this","prepareExportData","height","Math","ceil","length","Promise","resolve","reject","PNG","pngjs2","width","imgData","data","Buffer","from","i","opti","optipng","pack","pipe","fs","createWriteStream","replace","canvas","document","createElement","context","getContext","getImageData","putImageData","createReadStream","filterType","on","stringRepresentation","pixelString","c","toString","padStart","values","split","shift","hexToNum","prepareImportData","remainder","parts","numToHex","match","p","push","parseInt","img","drawImage","hex","TEMP","undefined","console","log","positive","valuesIn","leadingDecZeroes","slice","left","right","repeat","parseFloat","num","sign","test","toFixed","cap","min","rightString","exec","final","window","exports","require"],"mappings":"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","file":"index.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass PNGArrays {\r\n\r\n    /*\r\n        TODO\r\n\r\n        - test the alpha functionality (and add more tests, in general)\r\n\r\n        - short/big numbers optimization, to allow storing larger numbers\r\n            - normal: limit of 7 digits on the left hand side of the decimal place\r\n            - long: limit of 127 digits (by using an additional character for storing metadata)\r\n    */\r\n\r\n    static toPNG (array, {alpha=false, file=false}={}) {\r\n\r\n        // Convert the array values to Uint8Clamped values (Base 15 with 16th value used as metadata)\r\n        array = array.constructor == Uint8ClampedArray ? array : this.prepareExportData(array)\r\n\r\n        const width = 1000 // TODO, calculate or configure value for this\r\n        const height = Math.ceil((array.length/(alpha ? 4 : 3)) / width)\r\n\r\n        // Write to file\r\n        if (file) {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                const PNG = new this.pngjs2({width, height})\r\n                const imgData = new Uint8ClampedArray(array.length/3*4)\r\n\r\n                if (alpha) {\r\n                    PNG.data = Buffer.from(array)\r\n                } else {\r\n                    for (let i=0; i<array.length/3; i++) {\r\n                        imgData[i*4]   = array[i*3]\r\n                        imgData[i*4+1] = array[i*3+1]\r\n                        imgData[i*4+2] = array[i*3+2]\r\n                        imgData[i*4+3] = 255\r\n                    }\r\n                    PNG.data = Buffer.from(imgData)\r\n                }\r\n\r\n                const opti = new this.optipng([\"-o7\"])\r\n\r\n                PNG.pack().pipe(opti).pipe(this.fs.createWriteStream(file.replace(/\\.png$/, \"\")+\".png\"))\r\n\r\n                resolve()\r\n            })\r\n\r\n        } else {\r\n            // Draw to canvas\r\n            const canvas = document.createElement(\"canvas\")\r\n            canvas.width = width\r\n            canvas.height = height\r\n            const context = canvas.getContext(\"2d\")\r\n\r\n            const imgData = context.getImageData(0, 0, canvas.width, canvas.height)\r\n\r\n            if (alpha) {\r\n                context.putImageData(array, 0, 0)\r\n            } else {\r\n                for (let i=0; i<array.length/3; i++) {\r\n                    imgData.data[i*4]   = array[i*3]\r\n                    imgData.data[i*4+1] = array[i*3+1]\r\n                    imgData.data[i*4+2] = array[i*3+2]\r\n                    imgData.data[i*4+3] = 255\r\n                }\r\n                context.putImageData(imgData, 0, 0)\r\n            }\r\n\r\n            return canvas\r\n        }\r\n    }\r\n\r\n    static fromPNG (data, {alpha=false}={}) {\r\n\r\n        // Read from file\r\n        if (typeof data == \"string\") {\r\n            return new Promise((resolve, reject) => {\r\n                const rs = this.fs.createReadStream(data)\r\n\r\n                rs.pipe(new this.pngjs2({filterType: 4}))\r\n                .on(\"parsed\", function () {\r\n\r\n                    let stringRepresentation = \"\"\r\n\r\n                    for (let i=0; i<this.data.length/4; i++) {\r\n\r\n                        let pixelString = \"\"\r\n\r\n                        if (alpha) {\r\n                            for (let c=0; c<4; c++) {\r\n                                pixelString += this.data[i*4+c].toString(16).padStart(2, 0)\r\n                            }\r\n                        } else {\r\n                            for (let c=0; c<3; c++) {\r\n                                pixelString += this.data[i*4+c].toString(16).padStart(2, 0)\r\n                            }\r\n                        }\r\n\r\n                        stringRepresentation += pixelString\r\n                    }\r\n\r\n                    const values = stringRepresentation.split(\"f\")\r\n                    values.shift()\r\n\r\n                    for (let i=0; i<values.length; i++) {\r\n                        values[i] = PNGArrays.hexToNum(values[i])\r\n                    }\r\n\r\n                    resolve(values)\r\n                })\r\n            })\r\n        } else {\r\n            data = data.constructor == Uint8ClampedArray ? data : this.prepareImportData(data)\r\n\r\n            let stringRepresentation = \"\"\r\n\r\n            for (let i=0; i<data.length/4; i++) {\r\n\r\n                let pixelString = \"\"\r\n\r\n                if (alpha) {\r\n                    for (let c=0; c<4; c++) {\r\n                        pixelString += data[i*4+c].toString(16).padStart(2, 0)\r\n                    }\r\n                } else {\r\n                    for (let c=0; c<3; c++) {\r\n                        pixelString += data[i*4+c].toString(16).padStart(2, 0)\r\n                    }\r\n                }\r\n\r\n                stringRepresentation += pixelString\r\n            }\r\n\r\n            const values = stringRepresentation.split(\"f\")\r\n            values.shift()\r\n\r\n            for (let i=0; i<values.length; i++) {\r\n                values[i] = this.hexToNum(values[i])\r\n            }\r\n\r\n            return values\r\n        }\r\n    }\r\n\r\n\r\n    // Helper functions\r\n    static prepareExportData (array) {\r\n\r\n        const data = []\r\n        let remainder = \"\"\r\n\r\n        for (let i=0; i<array.length; i++) {\r\n\r\n            // Convert value to base15\r\n            const base = remainder + this.numToHex(array[i])\r\n            const parts = base.match(/.{1,2}/g)\r\n            const length = parts.length\r\n\r\n            for (let p=0; p<length; p++) {\r\n                if (parts[0].length==2) {\r\n                    data.push(parseInt(`0x${parts.shift()}`))\r\n                }\r\n            }\r\n\r\n            remainder = parts[0] || \"\"\r\n        }\r\n\r\n        while (data.length%3) {\r\n            data.push(0)\r\n        }\r\n\r\n        return new Uint8ClampedArray(data)\r\n    }\r\n\r\n    static prepareImportData (img) {\r\n        const canvas = document.createElement(\"canvas\")\r\n        canvas.height = img.height\r\n        canvas.width = img.width\r\n        const context = canvas.getContext(\"2d\")\r\n        context.drawImage(img, 0, 0)\r\n        return context.getImageData(0, 0, canvas.width, canvas.height).data\r\n    }\r\n\r\n    static hexToNum (hex, TEMP) {\r\n\r\n        if (hex==\"00000\") {\r\n            return 0\r\n        }\r\n\r\n        if (hex===undefined) {\r\n            console.log(hex, \"ghkdfhgjkldfhglkjflkdgfh\", TEMP)\r\n            return 0\r\n        }\r\n\r\n        const positive = parseInt(hex[0], 16) >= 7\r\n        const valuesIn = parseInt(hex[0], 15) - (positive ? 6 : -1)\r\n        const leadingDecZeroes = parseInt(hex.slice(1, 3), 15)\r\n        const left = hex.slice(3, 3+valuesIn)\r\n        let right = \"\"\r\n\r\n        if (left.length+3 < hex.length) {\r\n            right = \".\"+\"0\".repeat(leadingDecZeroes)+parseInt(hex.slice(3+valuesIn, hex.length), 15)\r\n        }\r\n\r\n        return (positive ? 1 : -1) * parseFloat(parseInt(left, 15)+right)\r\n    }\r\n\r\n    static numToHex (num) {\r\n\r\n        const positive = num > 0\r\n        let sign = num > 0 ? 7 : 0\r\n        let leadingDecZeroes = \"00\"\r\n\r\n        // Number is not an integer\r\n        if (num !== parseInt(num)) {\r\n\r\n            // Discard values below 17 decimal places\r\n            if (/\\.0{17}$/.test(num.toFixed(17))) {\r\n                return \"F\"+sign.toString(15)+\"0000\"\r\n            }\r\n\r\n            // The left part is capped\r\n            const cap = 2562890624\r\n            const left = Math.min(parseInt(num), cap).toString(15)\r\n            const rightString = num.toString().split(\".\")[1]\r\n\r\n            leadingDecZeroes = Math.min(/^0*/.exec(rightString)[0].length, 15).toString(15).padStart(2, 0)\r\n            const right = parseInt(rightString).toString(15)\r\n\r\n\r\n            sign += left.length-1\r\n\r\n            let final = \"F\"+sign.toString(15)+leadingDecZeroes+left+right\r\n\r\n            if (final.length%2!=0) {\r\n                final = \"F\"+sign.toString(15)+leadingDecZeroes+\"0\"+left+right\r\n            }\r\n\r\n            return final\r\n        }\r\n\r\n        sign += num.toString().length\r\n        let final = \"F\"+sign.toString(15)+leadingDecZeroes+num.toString(15)\r\n\r\n        if (final.length%2!=0) {\r\n            final = \"F\"+sign.toString(15)+leadingDecZeroes+\"0\"+num.toString(15)\r\n        }\r\n\r\n        return final\r\n    }\r\n\r\n}\r\n\r\n\r\n// https://github.com/DanRuta/jsNet/issues/33\r\n/* istanbul ignore next */\r\nif (typeof window != \"undefined\") {\r\n    window.exports = window.exports || {}\r\n    window.PNGArrays = PNGArrays\r\n} else {\r\n    PNGArrays.fs = require(\"fs\")\r\n    PNGArrays.pngjs2 = require(\"pngjs2\").PNG\r\n    PNGArrays.optipng = require(\"optipng\")\r\n}\r\nexports.PNGArrays = PNGArrays"]}