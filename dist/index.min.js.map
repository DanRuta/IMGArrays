{"version":3,"sources":["../dev/index.js"],"names":["PNGArrays","[object Object]","array","alpha","file","width","capacity","constructor","Uint8ClampedArray","this","prepareExportData","height","Math","ceil","length","Promise","resolve","reject","PNG","pngjs2","imgData","data","Buffer","from","i","opti","optipng","pngStream","pack","writeStream","fs","createWriteStream","replace","pipe","on","canvas","document","createElement","context","getContext","getImageData","putImageData","createReadStream","filterType","stringRepresentation","pixelString","c","toString","padStart","values","split","shift","hexToNum","prepareImportData","remainder","parts","numToHex","match","p","push","parseInt","img","drawImage","hex","undefined","positive","valuesIn","leadingDecZeroes","slice","left","right","parseFloat","repeat","num","sign","test","toFixed","cap","min","rightString","exec","meta","final","minVal","Infinity","maxVal","window","exports","require"],"mappings":"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","file":"index.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass PNGArrays {\r\n\r\n    /*\r\n        TODO\r\n\r\n        - test the alpha functionality (and add more tests, in general)\r\n\r\n        - short/big numbers optimization, to allow storing larger numbers\r\n            - normal: limit of 7 digits on the left hand side of the decimal place\r\n            - long: limit of 127 digits (by using an additional character for storing metadata)\r\n    */\r\n\r\n    static toPNG (array, {alpha=false, file=false, width=1000, capacity=1}={}) {\r\n\r\n        // Convert the array values to Uint8Clamped values (Base 15 with 16th value used as metadata)\r\n        array = array.constructor == Uint8ClampedArray ? array : this.prepareExportData(array, capacity)\r\n\r\n        const height = Math.ceil((array.length/(alpha ? 4 : 3)) / width)\r\n\r\n        // Write to file\r\n        if (file) {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                const PNG = new this.pngjs2({width, height})\r\n                const imgData = new Uint8ClampedArray(array.length/3*4)\r\n\r\n                if (alpha) {\r\n                    PNG.data = Buffer.from(array)\r\n                } else {\r\n                    for (let i=0; i<array.length/3; i++) {\r\n                        imgData[i*4]   = array[i*3]\r\n                        imgData[i*4+1] = array[i*3+1]\r\n                        imgData[i*4+2] = array[i*3+2]\r\n                        imgData[i*4+3] = 255\r\n                    }\r\n                    PNG.data = Buffer.from(imgData)\r\n                }\r\n\r\n                const opti = new this.optipng([\"-o7\"])\r\n                const pngStream = PNG.pack()\r\n                const writeStream = this.fs.createWriteStream(file.replace(/\\.png$/, \"\")+\".png\")\r\n\r\n                pngStream.pipe(opti).pipe(writeStream)\r\n                writeStream.on(\"finish\", () => resolve())\r\n            })\r\n\r\n        } else {\r\n            // Draw to canvas\r\n            const canvas = document.createElement(\"canvas\")\r\n            canvas.width = width\r\n            canvas.height = height\r\n            const context = canvas.getContext(\"2d\")\r\n\r\n            const imgData = context.getImageData(0, 0, canvas.width, canvas.height)\r\n\r\n            if (alpha) {\r\n                context.putImageData(array, 0, 0)\r\n            } else {\r\n                for (let i=0; i<array.length/3; i++) {\r\n                    imgData.data[i*4]   = array[i*3]\r\n                    imgData.data[i*4+1] = array[i*3+1]\r\n                    imgData.data[i*4+2] = array[i*3+2]\r\n                    imgData.data[i*4+3] = 255\r\n                }\r\n                context.putImageData(imgData, 0, 0)\r\n            }\r\n\r\n            return canvas\r\n        }\r\n    }\r\n\r\n    static fromPNG (data, {alpha=false, capacity=1}={}) {\r\n\r\n        // Read from file\r\n        if (typeof data == \"string\") {\r\n            return new Promise((resolve, reject) => {\r\n                const rs = this.fs.createReadStream(data)\r\n\r\n                rs.pipe(new this.pngjs2({filterType: 4}))\r\n                .on(\"parsed\", function () {\r\n\r\n                    let stringRepresentation = \"\"\r\n\r\n                    for (let i=0; i<this.data.length/4; i++) {\r\n\r\n                        let pixelString = \"\"\r\n\r\n                        if (alpha) {\r\n                            for (let c=0; c<4; c++) {\r\n                                pixelString += this.data[i*4+c].toString(16).padStart(2, 0)\r\n                            }\r\n                        } else {\r\n                            for (let c=0; c<3; c++) {\r\n                                pixelString += this.data[i*4+c].toString(16).padStart(2, 0)\r\n                            }\r\n                        }\r\n\r\n                        stringRepresentation += pixelString\r\n                    }\r\n\r\n                    const values = stringRepresentation.split(\"f\")\r\n                    values.shift()\r\n\r\n                    for (let i=0; i<values.length; i++) {\r\n                        values[i] = PNGArrays.hexToNum(values[i], capacity)\r\n                    }\r\n\r\n                    resolve(values)\r\n                })\r\n            })\r\n        } else {\r\n            data = data.constructor == Uint8ClampedArray ? data : this.prepareImportData(data)\r\n\r\n            let stringRepresentation = \"\"\r\n\r\n            for (let i=0; i<data.length/4; i++) {\r\n\r\n                let pixelString = \"\"\r\n\r\n                if (alpha) {\r\n                    for (let c=0; c<4; c++) {\r\n                        pixelString += data[i*4+c].toString(16).padStart(2, 0)\r\n                    }\r\n                } else {\r\n                    for (let c=0; c<3; c++) {\r\n                        pixelString += data[i*4+c].toString(16).padStart(2, 0)\r\n                    }\r\n                }\r\n\r\n                stringRepresentation += pixelString\r\n            }\r\n\r\n            const values = stringRepresentation.split(\"f\")\r\n            values.shift()\r\n\r\n            for (let i=0; i<values.length; i++) {\r\n                values[i] = this.hexToNum(values[i])\r\n            }\r\n\r\n            return values\r\n        }\r\n    }\r\n\r\n\r\n    // Helper functions\r\n    static prepareExportData (array, capacity) {\r\n\r\n        const data = []\r\n        let remainder = \"\"\r\n\r\n        for (let i=0; i<array.length; i++) {\r\n\r\n            // Convert value to base15\r\n            const base = remainder + this.numToHex(array[i], capacity)\r\n            const parts = base.match(/.{1,2}/g)\r\n            const length = parts.length\r\n\r\n            for (let p=0; p<length; p++) {\r\n                if (parts[0].length==2) {\r\n                    data.push(parseInt(`0x${parts.shift()}`))\r\n                }\r\n            }\r\n\r\n            remainder = parts[0] || \"\"\r\n        }\r\n\r\n        while (data.length%3) {\r\n            data.push(0)\r\n        }\r\n\r\n        return new Uint8ClampedArray(data)\r\n    }\r\n\r\n    static prepareImportData (img) {\r\n        const canvas = document.createElement(\"canvas\")\r\n        canvas.height = img.height\r\n        canvas.width = img.width\r\n        const context = canvas.getContext(\"2d\")\r\n        context.drawImage(img, 0, 0)\r\n        return context.getImageData(0, 0, canvas.width, canvas.height).data\r\n    }\r\n\r\n    static hexToNum (hex, capacity=1) {\r\n\r\n        if (hex==\"00000\") {\r\n            return 0\r\n        }\r\n\r\n        if (hex===undefined) {\r\n            return 0\r\n        }\r\n\r\n        const positive = parseInt(hex[0], 16) >= 7\r\n        const valuesIn = parseInt(hex[0], 15) - (positive ? 6 : -1)\r\n        const leadingDecZeroes = parseInt(hex.slice(1, 3), 15)\r\n        const left = hex.slice(3, 3+valuesIn)\r\n        let right = \"\"\r\n\r\n        // Return just the decimal part\r\n        if (capacity==0) {\r\n            return parseFloat(\"0.\"+\"0\".repeat(leadingDecZeroes) + parseInt(hex.slice(2+valuesIn, hex.length), 15))\r\n        }\r\n\r\n        // If the left side's length is smaller than total length (aka a decimal value)\r\n        if (left.length+3 < hex.length) {\r\n            right = \".\"+\"0\".repeat(leadingDecZeroes) + parseInt(hex.slice(3+valuesIn, hex.length), 15)\r\n        }\r\n\r\n        return (positive ? 1 : -1) * parseFloat(parseInt(left, 15)+right)\r\n    }\r\n\r\n    static numToHex (num, capacity=1) {\r\n\r\n        const positive = num > 0\r\n        let sign = num > 0 ? 7 : 0\r\n        let leadingDecZeroes = \"00\"\r\n\r\n        // Number is not an integer\r\n        if (num !== parseInt(num)) {\r\n\r\n            // Discard values below 17 decimal places and return 0\r\n            if (/\\.0{17}$/.test(num.toFixed(17))) {\r\n                return \"F\"+sign.toString(15)+\"0000\"\r\n            }\r\n\r\n            // The left part is capped to the biggest number that can be represented with 8 base15 characters\r\n            const cap = 2562890624 // Math.pow(15, 8)-1\r\n            const left = Math.min(parseInt(num), cap).toString(15)\r\n            const rightString = num.toString().split(\".\")[1]\r\n\r\n            leadingDecZeroes = Math.min(/^0*/.exec(rightString)[0].length, 15).toString(15).padStart(2, 0)\r\n            const right = parseInt(rightString).toString(15)\r\n\r\n\r\n            sign += left.length-1\r\n\r\n            const meta = \"F\" + (capacity==1 ? sign.toString(15) : \"\") + leadingDecZeroes\r\n\r\n            let final = meta + left+right\r\n\r\n            if (final.length%2!=0) {\r\n                final = meta + \"0\"+left+right\r\n            }\r\n\r\n            return final\r\n        }\r\n\r\n        sign += num.toString().length-1\r\n        const meta = \"F\" + (capacity==1 ? sign.toString(15) : \"\") + leadingDecZeroes\r\n\r\n        let final = meta + num.toString(15)\r\n\r\n        if (final.length%2!=0) {\r\n            final = meta + \"0\"+num.toString(15)\r\n        }\r\n\r\n        return final\r\n    }\r\n\r\n    static normalize (data) {\r\n        let minVal = Infinity\r\n        let maxVal = -Infinity\r\n\r\n        for (let i=0; i<data.length; i++) {\r\n            if (data[i] < minVal) {\r\n                minVal = data[i]\r\n            }\r\n            if (data[i] > maxVal) {\r\n                maxVal = data[i]\r\n            }\r\n        }\r\n\r\n        if ((-1*minVal + maxVal) != 0) {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = (data[i] + -1*minVal) / (-1*minVal + maxVal)\r\n            }\r\n        } else {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = 0.5\r\n            }\r\n        }\r\n\r\n        return {minVal, maxVal}\r\n    }\r\n\r\n    static unnormalize (data, minVal, maxVal) {\r\n\r\n        if (maxVal-minVal == 0) {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = (data[i] + 0.5) * minVal\r\n            }\r\n        }\r\n\r\n        for (let i=0; i<data.length; i++) {\r\n            data[i] = data[i] * (-1*minVal + maxVal) - -1*minVal\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// https://github.com/DanRuta/jsNet/issues/33\r\n/* istanbul ignore next */\r\nif (typeof window != \"undefined\") {\r\n    window.exports = window.exports || {}\r\n    window.PNGArrays = PNGArrays\r\n} else {\r\n    PNGArrays.fs = require(\"fs\")\r\n    PNGArrays.pngjs2 = require(\"pngjs2\").PNG\r\n    PNGArrays.optipng = require(\"optipng\")\r\n}\r\nexports.PNGArrays = PNGArrays"]}